_include:
  - omstimelation/oms-cabs.yml 

# # override default imaging settings from oms-cabs
lib:
  steps:
    wsclean:
      base:
        params:
          ms: '{recipe.ms}'
          prefix: '{recipe.image-prefix}'
          size: 6076
          scale: 1.5asec
          # size: '{recipe.wsclean_size}'
          # scale: '{recipe.pixel_scale}asec'
  recipes:
    make_masks:
      name: make_masks
      info: "makes a series of mask images based on a restored image"
      inputs:
        prefix:
          dtype: str

      aliases:
        restored_image: mask.restored_image
        threshold: mask.threshold
        dilate: mask.dilate
        mask: mask.mask
      defaults:
        threshold: 6.5
        dilate: 2

      steps:
        mask:
          cab: breizorro
          params:
            mask: '{recipe.prefix}-mask.fits'

## this augments the standard 'opts' config section to tweak logging settings
opts:
  log:
    dir: './{root.dir_out}/logs/log-{run.datetime}'
    name: log-{info.fqname}.txt
    nest: 2
    symlink: log


solarkat:
  name: boom
  info: "imaging of deep transient follow-up"

  assign:
    image-prefix: '{recipe.dir_out}/im{info.suffix}/im{info.suffix}{recipe.suffix}'

  assign_based_on:
    obs:
      L1:
        ms: MIGHTEE_CDFS_raw-J0333_2741-corr.ms
        dir_out: obs1lb
        perscan_dir_out: perscan_ms1
        sun_images: image_sun
        band: L
      L2:
        ms: 1645272078_sdp_l0_1024ch_J0333-2741.ms
        dir_out: obs2lb
        perscan_dir_out: perscan_ms2
        sun_images: image_sun
        band: L
      UHF:
        ms: 1583662427_sdp_l0.1024ch-J033230_280757-corr.ms
        dir_out: obsuhf
        perscan_dir_out: perscans_ms3
        sun_images: image_sun
        band: UHF
    
  
  inputs:
    obs:
      choices: [L1, L2, UHF]
      info: "Selects observation, see labels above"
    suffix:
      dtype: str
      default: ''
    dir_out: 
      dtype: str
    ms:
      dtype: MS
    splitted_ms_suffix:
      dtype: str
      default: '_scan_'
    ms_list:
      dtype: List[MS]

  steps:
    image-1:
      info: "auto-masked deep I clean"
      _use: lib.steps.wsclean.image
      params: 
        column: DATA
        temp_dir: temp_dir 
        save-source-list: false
                
    mask-1:
      recipe: 
        _use: lib.recipes.make_masks 
      params:
        restored_image: "{previous.restored_mfs}"
        prefix: "{previous.prefix}"
        threshold: 20

    image-2:
      info: "auto-masked deep I clean"
      _use: lib.steps.wsclean.image
      params:
        column: DATA
        fits-mask: "{previous.mask}"
        temp_dir: temp_dir 
        save-source-list: false

    save-flags-1: 
      cab: flagman
      params:
        ms: '{recipe.ms}'
        name: "after 1GC"
        mode: save 
    
    restore-flags-1: 
      cab: flagman
      params:
        ms: '{recipe.ms}'
        name: "after 1GC"
        mode: restore
   
    quartical_1:
      cab: quartical
      info: "Peel off axis source"
      params:
        input_ms.path: '{recipe.ms}'
        solver.terms: [K]
        K.type: phase
        K.direction_dependent: false
        K.freq_interval: '0'
        K.time_interval: '4' 
        K.initial_estimate: true
        input_ms.time_chunk: '128'
        solver.iter_recipe: [100]
        input_model.recipe: MODEL_DATA
        output.overwrite: 'true'
        output.products: [corrected_data]
        output.columns: [SELFCAL_DATA]

    save-flags-2: 
      cab: flagman
      params:
        ms: '{recipe.ms}'
        name: "after 2GC"
        mode: save
   
    image-3:
      info: "auto-masked deep I clean"
      _use: lib.steps.wsclean.image
      params:
        column: SELFCAL_DATA
        temp_dir: temp_dir
        save-source-list: false
        fits-mask: "{steps.image-1.prefix}-mask.fits"

    mask-2:
      recipe: 
        _use: lib.recipes.make_masks 
      params:
        restored_image: "{previous.restored_mfs}"
        prefix: "{previous.prefix}"
        threshold: 5

    image-4:
      info: "auto-masked deep I clean"
      _use: lib.steps.wsclean.image
      params:
        column: SELFCAL_DATA
        temp_dir: temp_dir
        save-source-list: true
        fits-mask: "{previous.mask"
        niter: 1000000
        multiscale: false
 
    backup_UVW:
      cab: backup_UVW
      params:
        ms: '{recipe.ms}'
        UVW_colname: 'UVW'

    restore_UVW:
      cab: restore_UVW
      skip: true
      params:
        ms: '{recipe.ms}'
        UVW_colname: 'UVW'

    split_ms_by_scan:
      cab: splitms
      params:
        ms: '{recipe.ms}'
        outputvis: '{recipe.dir_out}/{recipe.perscan_dir_out}'
        scan: 'all'
        datacolumn: 'all'

    sun_coordinates:
      cab: sun_coordinates
      params:
        ms: '{recipe.ms}'
        outfile: 'sun_coordinates.txt'

    shift_to_sun:
      cab: shift_to_sun
      params:
        ms: '{recipe.ms}'
        sun_coords: '{previous.outfile}'
        splitted_ms_dir: '{recipe.dir_out}/{recipe.perscan_dir_out}/'
 
        
    image_sun:
      params:
        ms_list:  =GLOB("{steps.split_ms_by_scan.outputvis}/*scan*.ms") # insert folder path then glob#         
        image-prefix: '{recipe.dir_out}/im-sun{info.suffix}/im{info.suffix}{recipe.suffix}'
      recipe:
        inputs:
          ms_list:
            dtype: List[MS]
          image-prefix:
            dtype: str
        for_loop:
          var: mss
          over: ms_list
        steps:
          image:
           _use: lib.steps.wsclean.image
           params:
             ms: '{recipe.mss}'
             prefix: '{recipe.image-prefix}'
             column: SELFCAL_DATA
             temp_dir: temp_dir
             niter: 0
             multiscale: false
             subtract-model: true

#--------------------------------------------------------#
#split individual scans further by time#
#--------------------------------------------------------#

    split_ms_by_time:
      params:
        ms_list:  =GLOB("{recipe.dir_out}/{recipe.perscan_dir_out}/*scan*.ms") # insert folder path then glob#         
        image-prefix: '{recipe.dir_out}/im-sun{info.suffix}/im{info.suffix}{recipe.suffix}'
      recipe:
        inputs:
          ms_list:
            dtype: List[MS]
          image-prefix:
            dtype: str
        for_loop:
          var: mss
          over: ms_list
        steps:
          perscan_get_timeranges:
            cab: 
              command: |  
                from pyrap.tables import table
                from astropy.time import Time
                import numpy as np
                dic={ "-": "/", " ":"/"}

                def replace_all(text, dic):
                    
                    for i, j in dic.items():
                        text = text.replace(i, j)
                    return text

                array=[]
                timerange_array=[]
                tb = table(scan_list)
                all_times = list(np.unique(tb.getcol('TIME')))
                t0 = all_times[0]
                t1 = all_times[-1]
                dt = (t1-t0)/(interval)
                for i in range(interval):
                    t2=dt*i+t0
                    t_iso = Time(t2/86400.0,format='mjd').iso
                    array.append(t_iso)
                for i in range(len(array)):
                  if i < (len(array)-1):
                      timerange=replace_all(array[i],dic)+'~'+replace_all(array[i+1],dic)
                      timerange_array.append(timerange)
                  else:
                      print()
                timeranges=timerange_array
                print(timerange_array)
              flavour: python-code
              inputs:
                scan_list:
                  dtype: MS
                interval:
                  dtype: int
              outputs:  
                timeranges:
                  dtype: List[str]  
            params:
              scan_list: '{recipe.mss}'
              interval: 3
          loop_timeranges:
            params: 
              timeranges: '=steps.perscan_get_timeranges.timeranges'
              ms: '=steps.perscan_get_timeranges.scan_list'
            recipe:
              inputs:
                ms: 
                  dtype: MS
                timeranges:
                  dtype: List[str]
              for_loop:
                var: timerange
                over: timeranges
              steps:          
                Casa-split-time:
                  cab: splitms_time
                  params:
                    vis: '{recipe.ms}'
                    timerange: '{recipe.timerange}'
                    outputvis: '{recipe.ms}-interval-{recipe.timerange@index}'
                    datacolumn: DATA

